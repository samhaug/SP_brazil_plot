#!/home/samhaug/anaconda2/bin/python
import numpy as np
import seispy
import obspy
from matplotlib import pyplot as plt
import matplotlib.gridspec as gridspec
from obspy.taup import TauPyModel
from subprocess import call
model = TauPyModel(model="prem50")

'''
This script plots a comparison of synthetic and data for the S1800P conversion.
I've selectively removed a couple of bad traces
'''

stz = obspy.read('/home/samhaug/work1/SP_brazil_sims/memex/2s_0_-5_0_2km_na/st_Z.pk')
ste = obspy.read('/home/samhaug/work1/SP_brazil_sims/memex/2s_0_-5_0_2km_na/st_E.pk')
stn = obspy.read('/home/samhaug/work1/SP_brazil_sims/memex/2s_0_-5_0_2km_na/st_N.pk')

dstz = obspy.read('/home/samhaug/work1/SP_brazil_data/BHZ.pk')
dstz = seispy.filter.gimp_filter(dstz)
dstz.filter('highpass',freq=1./50)

dste = obspy.read('/home/samhaug/work1/SP_brazil_data/BHE.pk')
dste = seispy.filter.gimp_filter(dste)
dste.filter('highpass',freq=1./50)

dstn = obspy.read('/home/samhaug/work1/SP_brazil_data/BHN.pk')
dstn = seispy.filter.gimp_filter(dstn)
dstn.filter('highpass',freq=1./50)

dl,dfq,dft = seispy.data.rotate_phase(dstz,dstn,dste,['S1850P'])
dfuck,dq,dt = seispy.data.rotate_phase(dstz,dstn,dste,['S'])
dl = seispy.data.align_on_phase(dl,phase =['P'],window_tuple=(-20,20))
dq = seispy.data.align_on_phase(dq,phase =['S'],window_tuple=(-20,20),min=False)
dt = seispy.data.align_on_phase(dt,phase =['S'],window_tuple=(-20,20))

stz.integrate()
ste.integrate()
stn.integrate()

for tr in stz:
    tr.stats.az = tr.stats.sac['az']
for tr in stn:
    tr.stats.az = tr.stats.sac['az']
for tr in ste:
    tr.stats.az = tr.stats.sac['az']

l,fq,ft = seispy.data.rotate_phase(stz,stn,ste,['S1850P'])
fuck,q,t = seispy.data.rotate_phase(stz,stn,ste,['S'])

#l = seispy.data.align_on_phase(l,phase =['P'],window_tuple=(-20,20))

for tr in l:
    tr.stats.az = tr.stats.sac['az']
for tr in dl:
    tr.stats.az = tr.stats.sac['az']
for tr in q:
    tr.stats.az = tr.stats.sac['az']
for tr in t:
    tr.stats.az = tr.stats.sac['az']

l.sort(['az'])
dl.sort(['az'])
q.sort(['az'])
t.sort(['az'])

fig,ax = plt.subplots(figsize=(3,5))
fig.patch.set_visible(False)

#ax.set_title(,size=10)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.yaxis.set_ticklabels([])
ax.yaxis.set_ticks([])
ax.tick_params(axis='both', which='major', labelsize=7)
ax.xaxis.set_ticks_position('bottom')
ax.set_xlim((-10,10))
ax.set_ylim((-1,14))
ax.set_xlabel('Time after conversion (s)',size=10)

skip_list = ['V19A','R12A']

for idx, tr in enumerate(l):
    name = tr.stats.station
    if name in skip_list:
        l.remove(tr)
        dl.remove(dl[idx])

lmax = []
for idx,tr in enumerate(l):
    name = tr.stats.station
    sr = tr.stats.sampling_rate

    #This is the same as windowing on S1775P
    a = seispy.data.phase_window(tr,phase=['S1800P'],window=(-8,12))
    d = seispy.data.phase_window(dl[idx],['S1800P'],window=(-20,20))
    #seispy.plot.plot(tr,phase_list=['P','S1850P'])
    tl = np.linspace(-10,10,num=len(a.data))
    dtl = np.linspace(-20,20,num=len(d.data))

    #d.normalize()
    #d.data *= 0.7
    #ax.plot(dtl,2.0*idx+d.data,color='b',lw=0.5,alpha=0.8)


    if name == 'N10A':
        d.data = np.roll(d.data,int(sr*2.5))
    elif name == 'OR074':
        d.data = np.roll(d.data,int(sr*3.8))
    elif name == 'J11A':
        d.data = np.roll(d.data,int(sr*2.6))
    elif name == 'E060':
        d.data = np.roll(d.data,int(sr*2.0))
    elif name == 'HLID':
        d.data = np.roll(d.data,int(sr*2.6))
    elif name == 'G10A':
        d.data = np.roll(d.data,int(sr*2.3))
    elif name == 'W05':
        d.data = np.roll(d.data,int(sr*2.3))

    d = d.slice(d.stats.starttime+10,d.stats.starttime+30)
    dtl = np.linspace(-10,10,num=len(d.data))
    z = np.polyfit(dtl,d.data,4)
    p = np.poly1d(z)
    d.data += -1*p(dtl)
    d.data += -1*np.mean(d.data)
    d_max = np.abs(d.data).max()
    d.normalize()
    a.normalize()
    d.data *= 0.7
    a.data *= 0.7
    gcarc = tr.stats.sac['gcarc']
    az = tr.stats.sac['az']
    h = tr.stats.sac['evdp']
    ax.plot(dtl,0.4+2.0*idx+d.data,color='k',lw=0.5,alpha=0.8)
    ax.plot(tl,0.4+2.0*idx+a.data,color='r',lw=0.5,alpha=0.8)
    #ax.text(-9,2*idx+0.44,r'$\Delta =$'+str(np.round(gcarc,1))+r'$^{\circ}$',size=6)
    #ax.text(7,2*idx+0.44,r'$az =$'+str(np.round(az,2))+r'$^{\circ}$',size=6)
    ax.text(-6,0.40+2*idx+0.54,name,size=6)
    #ax.text(0.5,2*idx+0.44,str(int(a_max))+'$nm$',size=6)

plt.savefig('synth_S1800PL.pdf')
call('evince synth_S1800PL.pdf',shell=True)



