#!/home/samhaug/anaconda2/bin/python

import numpy as np
import obspy
import scipy
import seispy
import h5py
from matplotlib import pyplot as plt
import time

from subprocess import call
'''
Find the amplitude of S1750P conversion with uncertainty by bootstrapping.

make_h5 will save an h5 file with the data that can be used for quick
bootstrapping. The other functions will operate on this h5 file. and give
a bootstrapped result.
'''

def setup_data(sim_dir):
    print('process '+sim_dir)
    z = obspy.read(sim_dir+'/st_Z.pk')
    e = obspy.read(sim_dir+'/st_E.pk')
    n = obspy.read(sim_dir+'/st_N.pk')
    l,qf,tf = seispy.data.rotate_phase(z,n,e,['S1800P'])
    lf,q,t = seispy.data.rotate_phase(z,n,e,['S'])
    data_list = []
    q = seispy.filter.range_filter(q,(60,90))
    l = seispy.filter.range_filter(l,(60,90))
    l.integrate()
    q.integrate()

    for idx,tr in enumerate(l):
        q[idx].data = obspy.signal.filter.envelope(q[idx].data)
        s_tr = seispy.data.phase_window(q[idx],['S'],window=(-100,100))
        tr.data *= 1./s_tr.data.max()
        phase = seispy.data.phase_window(tr,phase=['S1800P'])
        data_list.append(phase.data.max()-phase.data.min())
    return data_list

def setup_stream():
    l = obspy.read('/home/samhaug/work1/SP_brazil_data/l_S1800P_sparse.pk')
    q = obspy.read('/home/samhaug/work1/SP_brazil_data/q_S_sparse.pk')
    for idx, tr in enumerate(q):
        q[idx].data = obspy.signal.filter.envelope(tr.data)
        a = seispy.data.phase_window(tr,['S'],window=(-100,100))
        max_S = a.data.max()
        l[idx].data *= 1./max_S
    return l

def make_data_array(st):
    a = []
    st = seispy.filter.range_filter(st,(60,90))
    st = seispy.data.normalize_on_phase(st,phase=['S'])
    for idx,tr in enumerate(st):
        b = seispy.data.phase_window(tr,['S1700P'],window=(-0,20))
        a.append(b.data)

    return np.array(a)

def save_bootstrap(boot_array):
    '''
    This script performs a bootstrap on the data stack and saves
    the h5py file in SP_brazil_data. You only need to run this once you have
    made the original bootstrap. Or if you want to change a bootstrapping
    parameter
    '''
    print('Kill now if you dont want to bootstrap again')
    time.sleep(5)
    print('Starting')
    boot_list = []
    for ii in range(1000):
        single = []
        for jj in range(0,boot_array.shape[0]):
            idx = np.random.randint(0,boot_array.shape[0])
            single.append(boot_array[idx])
        single = np.array(single).mean(axis=0)
        boot_list.append(single)
    f = h5py.File('/home/samhaug/work1/SP_brazil_data/bootstrap_script.h5','w')
    f.create_dataset('boot',data = np.array(boot_list))
    f.close()

def plot_bootstrap():
    '''
    Plot a bootstrapped waveform along with a scatter plot of simulated 
    amplitudes.
    '''
    f = h5py.File('/home/samhaug/work1/SP_brazil_data/bootstrap_script.h5','r')
    boot_list = f['boot'][...]
    mean = np.array(boot_list).mean(axis=0)
    std = np.array(boot_list).std(axis=0)

    t = np.linspace(-10,10,num=len(mean))
    p = np.poly1d(np.polyfit(t,mean,4))
    fig,ax = plt.subplots(2,1,figsize=(3,5))

    for b in ax:
        b.spines['top'].set_visible(False)
        b.spines['right'].set_visible(False)
        b.tick_params(axis='both', which='major', labelsize=6)
        b.xaxis.set_ticks_position('bottom')
        b.yaxis.set_ticks_position('left')

    mean += -1*p(t)
    ax[0].set_ylabel('|A|',size=7)
    ax[0].set_xlabel('Seconds',size=7)
    ax[0].plot(t,mean,color='k',lw=0.5)
    ax[0].fill_between(t,mean+std,mean-std,color='k',alpha=0.2)
    ax[0].set_xlim((-6,6))
    ax[0].set_ylim((-0.1,0.1))
    ax[0].axvspan(-2, 2, alpha=0.2, color='blue')


    ampmax = mean.max()
    ampmin = mean.min()
    amp = ampmax-ampmin
    topstd = amp+std
    botstd = amp-std
    i_max = np.argmax(mean)
    i_min = np.argmin(mean)
    stdmax = topstd[i_max]-botstd[i_min]
    stdmin = botstd[i_max]-topstd[i_min]
    ax[1].set_ylabel('|A|',size=7)
    ax[1].set_xlabel(r'Percent $\delta V_{S}$',size=7)
    ax[1].axhline(amp,color='k',lw=0.5)
    ax[1].fill_between(np.linspace(0,-10),amp+stdmax,amp+stdmin,color='k',alpha=0.3)
    ax[1].set_xlim(0,-10)
    ax[1].set_ylim((0.0,0.2))

    d_3 = setup_data('/home/samhaug/work1/SP_brazil_sims/memex/2s_0_-3_0_10km_na')
    #ax[1].scatter(-3,np.mean(d_3),marker='*',s=3)
    ax[1].errorbar(-3, np.mean(d_3), yerr=np.std(d_3),color='k')
    #ax[1].scatter(-3,np.mean(d_3)+np.std(d_3),marker='o',s=1)
    #ax[1].scatter(-3,np.mean(d_3)-np.std(d_3),marker='o',s=1)
    d_5 = setup_data('/home/samhaug/work1/SP_brazil_sims/memex/2s_0_-5_0_10km_na')
    #ax[1].scatter(-5,np.mean(d_5),marker='*',s=3)
    ax[1].errorbar(-5, np.mean(d_5), yerr=np.std(d_5),color='k')
    #ax[1].scatter(-5,np.mean(d_5)+np.std(d_5),marker='o',s=1)
    #ax[1].scatter(-5,np.mean(d_5)-np.std(d_5),marker='o',s=1)
    d_7 = setup_data('/home/samhaug/work1/SP_brazil_sims/memex/0_-7_0_10km_na')
    #ax[1].scatter(-7,np.mean(d_7),marker='*',s=3)
    ax[1].errorbar(-7, np.mean(d_7), yerr=np.std(d_7),color='k')
    #ax[1].scatter(-7,np.mean(d_7)+np.std(d_7),marker='o',s=1)
    #ax[1].scatter(-7,np.mean(d_7)-np.std(d_7),marker='o',s=1)

    plt.tight_layout()

    plt.savefig('bootstrap_amplitude.pdf')
    call('evince bootstrap_amplitude.pdf',shell=True)

#This is where the action is
#l = setup_stream()
#data = make_data_array(l)
#save_bootstrap(data)
plot_bootstrap()



